{"version":3,"sources":["main.js"],"names":["timeout","Callback","setTimeout","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACzBC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAH,IAAAA,QAAQ;AACT,GAHS,EAGP,IAHO,CAAV;AAID;;AACDD,OAAO,CAAC,YAAM;AACZG,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,CAFM,CAAP","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["/*//산술 연산자(arithmetic operator)\n\nconsole.log(1 + 2)\nconsole.log(5 - 7)\nconsole.log(3 * 4)\nconsole.log(10 / 2)\nconsole.log(7 % 5) //나머지 연산자 % : 나누고 나머지를 출력*/\n\n/*//할당 연산자(assignment operator)\n\nlet a = 2\n// a = a + 1\na += 1\n\nconsole.log(a)*/\n\n/*//비교 연산자(comparison operator)\n\nconst a = 1\nconst b = 3\n\nconsole.log( a === b) //일치연산자\n\nfunction isEqual(x, y) {\n  return x === y\n}\n\nconsole.log(isEqual(1, 2))\nconsole.log(isEqual(2,'2'))\n\nconst a = 13\nconst b = 13\n\nconsole.log(a !== b)\nconsole.log(a <= b)*/\n\n/*//논리 연산자(logical operator)\n\nconst a = 1 ===123\nconst b = 'AB' === 'ABC'\nconst c = false\n\nconsole.log(a)\nconsole.log(b)\nconsole.log(c)\n\nconsole.log('&&: ', a && c)  // and 그리고\nconsole.log('||: ', a || b || c) // or 또는\nconsole.log('!: ', !a) // not 부정*/\n\n/*//삼항 연산자(ternary operator)\n\nconst a = 1 < 2\n\nif (a) {\n  console.log('참')\n} else {\n  console.log('거짓')\n}\n\nconsole.log(a ? '참' : '거짓')*/\n\n\n/*// 조건문 (If statement)\nimport random from './getRandom'\n\nconst a = random()\n\nswitch (a){\n  case 0: \n    console.log('a is 0')\n    break\n  case 2:\n    console.log('a is 2')\n    break\n  case 4:\n    console.log('a is 4')\n    break\n  default:\n    console.log('rest...')\n}\n\nif(a === 0) {\n  console.log('a is 0')\n} else if( a === 2 ){\n  console.log('a is 2')\n} else if( a === 4 ){\n  console.log('a is 4')\n} \nelse {\n  console.log('rest...')\n} */\n\n\n// 반복문 (For statement)\n// for (시작조건; 종료조건; 변화조건) {}\n\n/*const ulEl = document.querySelector('ul')\n\nfor (let i = 0; i < 10; i+= 1){\n  const li = document.createElement('li')\n  li.textContent = `list-${i + 1}`\n  if((i+1) % 2 === 0){\n    li.addEventListener('click', function (){\n      console.log(li.textContent)\n    })\n  }\n  ulEl.appendChild(li)\n}*/\n\n/*//변수 유효범위(Variable Scope)\n//var, let, const\n\nfunction scope() {\n  if (true){\n    const a = 123\n    console.log(a) //const, let 블록레벨의 유효범위를 가짐\n  }\n}\nscope()*/\n\n\n//형 변환(Type convesion)\n/*const a = 1\nconst b = '1'\n\nconsole.log(a == b)*/\n\n//Truthy(참 같은 값)\n// true, {}, [], 1, 2, 'false', -12, '3.14' ...\n\n//Falsy(거짓 같은 값)\n// false, '', null, undefined, 0, -0, NaN\n\n/*if ('false') {\n  console.log(123)\n}*/\n\n// 함수\n\n/*function sum(x, y) { //매개변수\n  if (x < 2) {\n    return 123\n  } \n  return x + y\n}\n\nconsole.log(sum(1,3))*/\n\n/*function sum(){\n  console.log(arguments)\n  return arguments [0] + arguments\n}\n\nconsole.log(sum(7,3))*/\n\n\n//화살표 함수\n// () => {} vs function () {}\n// 일부내용을 생략해 축약형으로 가능\n\n// const double = function (x, y){\n//   return x * 2\n// }\n// console.log('double: ', double(7))\n\n// const doubleArrow = x =>  ({name: 'Heropy'}) /* = {\n//   return x*2\n// }*/\n// console.log('doubleArrow', doubleArrow(7)) \n\n//즉시실행함수\n//IIFE, Immediately-Invoked Function Expression\n\n/*const a = 7\nfunction double() {\n  console.log(a*2)\n}\ndouble();\n\n(function () {\n  console.log(a * 2)\n}());\n\n(function () {\n  console.log(a * 2)\n})();\n\n//호이스팅(Hosting)\n// 함수 선언부가 유효범위 최상단으로 끌어올려지는 현상\n\nconst b = 8\n\ndouble()\n\nfunction double (){\n  console.log(b * 2)\n}*/\n\n//타이머함수\n//setTimeout(함수, 시간) : 일정 시간 후 함수 실행\n//setInterval(함수, 시간 ): 시간 간격마다 함수 실행\n//clearTimeout() : 설정된 Timeout 함수를 종료\n//clearInterval() : 설정된 Interval 함수를 종료\n\n/*const timer = setTimeout( () => {\n  console.log('Heropy!')\n}, 3000)\n\nconst timer = setInterval( () => {\n  console.log('Heropy!')\n}, 3000)\n\nconst h1El = document.querySelector('h1')\nh1El.addEventListener('click', () => {\n  clearInterval(timer)\n})*/\n\n//콜백(Callback)\n//함수의 인수로 사용되는 함수\n\n//setTimeout(함수, 시간)\n\nfunction timeout(Callback) {\n  setTimeout(() => {\n    console.log('Heropy!')\n    Callback()\n  }, 3000)\n}\ntimeout(() => {\n  console.log('Done!')\n})"]}